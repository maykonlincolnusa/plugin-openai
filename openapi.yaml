openapi: 3.0.1
info:
  title: Compass Plugin
  description: API lets you search real estate properties
  version: 'v1'
servers:
  - url: https://plankton-app-pmrpv.ondigitalocean.app/
paths:
  /query/{username}:
    post:
      operationId: query
      summary: Get the list of listings
      parameters:
      - in: path
        name: username
        schema:
            type: string
        required: true
        description: The name of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
  /todos/{username}:
    get:
      operationId: getTodos
      summary: Get the list of todos
      parameters:
      - in: path
        name: username
        schema:
            type: string
        required: true
        description: The name of the user.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTodosResponse'
    post:
      operationId: addTodo
      summary: Add a todo to the list
      parameters:
      - in: path
        name: username
        schema:
            type: string
        required: true
        description: The name of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addTodoRequest'
      responses:
        "200":
          description: OK
    delete:
      operationId: deleteTodo
      summary: Delete a todo from the list
      parameters:
      - in: path
        name: username
        schema:
            type: string
        required: true
        description: The name of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteTodoRequest'
      responses:
        "200":
          description: OK

components:
  schemas:
    QueryRequest:
      type: object
      required:
      - todo
      properties:
        userQuery:
          type: string
          description: The query which user has typed to search for properties.
          required: true
        minPrice:
          type: float
          description: The minimum price of a property that is returned in the API response. For example, if you are looking for properties that are more than $500,000, you can use the minPrice attribute to filter the results to only include properties that have a price of $500,000 or more.
          required: false
        maxPrice:
          type: float
          description: The maximum price of a property that is returned in the API response. For example, if you are looking for properties that are less than $500,000, you can use the maxPrice attribute to filter the results to only include properties that have a price of $500,000 or less.
          required: false
        minBedrooms:
          type: float
          description: The minimum number of bedrooms that a property must have in order to be returned in the API response. For example, if you are looking for properties with at least 3 bedrooms, you can use the minBedrooms attribute to filter the results to only include properties that have 3 bedrooms or more.
          required: false
        maxBedrooms:
          type: float
          description: The maximum number of bedrooms that a property can have in order to be returned in the API response. For example, if you are looking for properties with no more than 3 bedrooms, you can use the maxBedrooms attribute to filter the results to only include properties that have 3 bedrooms or fewer.
          required: false
        minSquareFootage:
          type: float
          description: The minSquareFootage attribute in a real estate API is the minimum square footage of a property that must have in order to be returned in the API response. For example, if you are looking for properties with at least 1,000 square feet, you can use the minSquareFootage attribute to filter the results to only include properties that have 1,000 square feet or more.
          required: false
        maxSquareFootage:
          type: float
          description: The maxSquareFootage attribute in a real estate API is the maximum square footage of a property that can have in order to be returned in the API response. For example, if you are looking for properties with no more than 1,000 square feet, you can use the maxSquareFootage attribute to filter the results to only include properties that have 1,000 square feet or fewer.
          required: false
        locations:
          type: array
          items:
            type: string
            description: The location attribute in a real estate API is the neighborhood of a property. For example, if you are looking for properties in chelsea and hudson, you can use location attribute to filter the properties.
        listingType:
          type: string
          enum: ["rental", "sale"]
          description: The listingType attribute in a real estate API is the type of listing, it has value of "sale" or "rental". sale is the default value.
          required: false
        num:
          type: float
          description: The number of results required by the user. For example, if query contains give me 10 properties which are more than 20 million dollars then num will be 10.
          required: false
    QueryResponse:
      type: object
      properties:
        properties:
          type: array
          items:
            type: string
          description: The list of properties urls.
    getTodosResponse:
      type: object
      properties:
        todos:
          type: array
          items:
            type: string
          description: The list of todos.
    addTodoRequest:
      type: object
      required:
      - todo
      properties:
        todo:
          type: string
          description: The todo to add to the list.
          required: true
    deleteTodoRequest:
      type: object
      required:
      - todo_idx
      properties:
        todo_idx:
          type: integer
          description: The index of the todo to delete.
          required: true
