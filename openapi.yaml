openapi: 3.0.0
info:
  title: Medium API
  version: "1.0"
servers:
  - url: https://api.medium.com/v1
paths:
  /users/{authorId}/posts:
    post:
      summary: Creates a post on the authenticated userâ€™s profile.
      parameters:
        - name: authorId
          in: path
          required: true
          description: The user id of the authenticated user.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the post.
                  maxLength: 100
                contentFormat:
                  type: string
                  enum: [html, markdown]
                  description: The format of the "content" field.
                content:
                  type: string
                  description: The body of the post, in a valid, semantic, HTML fragment, or Markdown.
                tags:
                  type: array
                  items:
                    type: string
                    maxLength: 25
                canonicalUrl:
                  type: string
                publishStatus:
                  type: string
                  enum: [public, draft, unlisted]
                license:
                  type: string
                  enum: [all-rights-reserved, cc-40-by, cc-40-by-sa, cc-40-by-nd, cc-40-by-nc, cc-40-by-nc-nd, cc-40-by-nc-sa, cc-40-zero, public-domain]
                notifyFollowers:
                  type: boolean
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      authorId:
                        type: string
                      tags:
                        type: array
                        items:
                          type: string
                      url:
                        type: string
                      canonicalUrl:
                        type: string
                      publishStatus:
                        type: string
                      publishedAt:
                        type: integer
                        format: int64
                      license:
                        type: string
                      licenseUrl:
                        type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /publications/{publicationId}/posts:
    post:
      summary: Creates a post under a publication.
      parameters:
        - name: publicationId
          in: path
          required: true
          description: The id of the publication the post is being created under.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the post.
                  maxLength: 100
                contentFormat:
                  type: string
                  enum: [html, markdown]
                content:
                  type: string
                  description: The body of the post, in a valid, semantic, HTML fragment, or Markdown.
                tags:
                  type: array
                  items:
                    type: string
                    maxLength: 25
                publishStatus:
                  type: string
                  enum: [public, draft, unlisted]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      publicationId:
                        type: string
                      # ... other fields similar to the first endpoint ...
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
